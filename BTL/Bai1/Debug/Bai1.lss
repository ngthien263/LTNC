
Bai1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000296  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000296  0000032a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800082  00800082  0000034c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c59  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000756  00000000  00000000  00001099  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051c  00000000  00000000  000017ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e4  00000000  00000000  00001e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000557  00000000  00000000  000021ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002743  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e9       	ldi	r30, 0x96	; 150
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 39       	cpi	r26, 0x92	; 146
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 19 01 	call	0x232	; 0x232 <main>
  8a:	0c 94 49 01 	jmp	0x292	; 0x292 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_command>:
	{
		unsigned char digit = str[i] - '0';
		result = result * 10 + digit;
	}
	return result;
}
  92:	92 b3       	in	r25, 0x12	; 18
  94:	9e 7f       	andi	r25, 0xFE	; 254
  96:	92 bb       	out	0x12, r25	; 18
  98:	92 b3       	in	r25, 0x12	; 18
  9a:	9d 7f       	andi	r25, 0xFD	; 253
  9c:	92 bb       	out	0x12, r25	; 18
  9e:	ef e9       	ldi	r30, 0x9F	; 159
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_command+0x10>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_command+0x16>
  a8:	00 00       	nop
  aa:	85 bb       	out	0x15, r24	; 21
  ac:	82 b3       	in	r24, 0x12	; 18
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	82 bb       	out	0x12, r24	; 18
  b2:	8f e9       	ldi	r24, 0x9F	; 159
  b4:	9f e0       	ldi	r25, 0x0F	; 15
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <LCD_command+0x24>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <LCD_command+0x2a>
  bc:	00 00       	nop
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	8b 7f       	andi	r24, 0xFB	; 251
  c2:	82 bb       	out	0x12, r24	; 18
  c4:	ef ed       	ldi	r30, 0xDF	; 223
  c6:	fe e2       	ldi	r31, 0x2E	; 46
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCD_command+0x36>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCD_command+0x3c>
  ce:	00 00       	nop
  d0:	08 95       	ret

000000d2 <LCD_data>:
  d2:	92 b3       	in	r25, 0x12	; 18
  d4:	91 60       	ori	r25, 0x01	; 1
  d6:	92 bb       	out	0x12, r25	; 18
  d8:	92 b3       	in	r25, 0x12	; 18
  da:	9d 7f       	andi	r25, 0xFD	; 253
  dc:	92 bb       	out	0x12, r25	; 18
  de:	ef e9       	ldi	r30, 0x9F	; 159
  e0:	ff e0       	ldi	r31, 0x0F	; 15
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_data+0x10>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_data+0x16>
  e8:	00 00       	nop
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	82 b3       	in	r24, 0x12	; 18
  ee:	84 60       	ori	r24, 0x04	; 4
  f0:	82 bb       	out	0x12, r24	; 18
  f2:	8f e9       	ldi	r24, 0x9F	; 159
  f4:	9f e0       	ldi	r25, 0x0F	; 15
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_data+0x24>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LCD_data+0x2a>
  fc:	00 00       	nop
  fe:	82 b3       	in	r24, 0x12	; 18
 100:	8b 7f       	andi	r24, 0xFB	; 251
 102:	82 bb       	out	0x12, r24	; 18
 104:	ef e9       	ldi	r30, 0x9F	; 159
 106:	ff e0       	ldi	r31, 0x0F	; 15
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_data+0x36>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_data+0x3c>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <LCD_init>:
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	84 bb       	out	0x14, r24	; 20
 116:	81 b3       	in	r24, 0x11	; 17
 118:	87 60       	ori	r24, 0x07	; 7
 11a:	81 bb       	out	0x11, r24	; 17
 11c:	8f e9       	ldi	r24, 0x9F	; 159
 11e:	9f e0       	ldi	r25, 0x0F	; 15
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <LCD_init+0xe>
 124:	00 c0       	rjmp	.+0      	; 0x126 <LCD_init+0x14>
 126:	00 00       	nop
 128:	88 e3       	ldi	r24, 0x38	; 56
 12a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_command>
 12e:	8c e0       	ldi	r24, 0x0C	; 12
 130:	0e 94 49 00 	call	0x92	; 0x92 <LCD_command>
 134:	8f e9       	ldi	r24, 0x9F	; 159
 136:	9f e0       	ldi	r25, 0x0F	; 15
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_init+0x26>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_init+0x2c>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <LCD_print>:
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ec 01       	movw	r28, r24
 148:	03 c0       	rjmp	.+6      	; 0x150 <LCD_print+0xe>
 14a:	21 96       	adiw	r28, 0x01	; 1
 14c:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_data>
 150:	88 81       	ld	r24, Y
 152:	81 11       	cpse	r24, r1
 154:	fa cf       	rjmp	.-12     	; 0x14a <LCD_print+0x8>
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <getkey>:
 15c:	cf 93       	push	r28
 15e:	8f e0       	ldi	r24, 0x0F	; 15
 160:	87 bb       	out	0x17, r24	; 23
 162:	1a ba       	out	0x1a, r1	; 26
 164:	c0 e0       	ldi	r28, 0x00	; 0
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	48 c0       	rjmp	.+144    	; 0x1fa <getkey+0x9e>
 16a:	98 b3       	in	r25, 0x18	; 24
 16c:	ac 2f       	mov	r26, r28
 16e:	b0 e0       	ldi	r27, 0x00	; 0
 170:	fd 01       	movw	r30, r26
 172:	e8 58       	subi	r30, 0x88	; 136
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	21 e0       	ldi	r18, 0x01	; 1
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	00 80       	ld	r0, Z
 17c:	02 c0       	rjmp	.+4      	; 0x182 <getkey+0x26>
 17e:	22 0f       	add	r18, r18
 180:	33 1f       	adc	r19, r19
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <getkey+0x22>
 186:	29 2b       	or	r18, r25
 188:	28 bb       	out	0x18, r18	; 24
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	25 c0       	rjmp	.+74     	; 0x1d8 <getkey+0x7c>
 18e:	29 b3       	in	r18, 0x19	; 25
 190:	69 2f       	mov	r22, r25
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	fb 01       	movw	r30, r22
 196:	e4 58       	subi	r30, 0x84	; 132
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	e0 81       	ld	r30, Z
 19c:	4e 2f       	mov	r20, r30
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <getkey+0x4a>
 1a2:	35 95       	asr	r19
 1a4:	27 95       	ror	r18
 1a6:	ea 95       	dec	r30
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <getkey+0x46>
 1aa:	20 ff       	sbrs	r18, 0
 1ac:	14 c0       	rjmp	.+40     	; 0x1d6 <getkey+0x7a>
 1ae:	fb 01       	movw	r30, r22
 1b0:	ee 0f       	add	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	ee 0f       	add	r30, r30
 1b6:	ff 1f       	adc	r31, r31
 1b8:	e0 5a       	subi	r30, 0xA0	; 160
 1ba:	ff 4f       	sbci	r31, 0xFF	; 255
 1bc:	ea 0f       	add	r30, r26
 1be:	fb 1f       	adc	r31, r27
 1c0:	80 81       	ld	r24, Z
 1c2:	29 b3       	in	r18, 0x19	; 25
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	04 2e       	mov	r0, r20
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <getkey+0x72>
 1ca:	35 95       	asr	r19
 1cc:	27 95       	ror	r18
 1ce:	0a 94       	dec	r0
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <getkey+0x6e>
 1d2:	20 fd       	sbrc	r18, 0
 1d4:	f6 cf       	rjmp	.-20     	; 0x1c2 <getkey+0x66>
 1d6:	9f 5f       	subi	r25, 0xFF	; 255
 1d8:	96 30       	cpi	r25, 0x06	; 6
 1da:	c8 f2       	brcs	.-78     	; 0x18e <getkey+0x32>
 1dc:	98 b3       	in	r25, 0x18	; 24
 1de:	a8 58       	subi	r26, 0x88	; 136
 1e0:	bf 4f       	sbci	r27, 0xFF	; 255
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	0c 90       	ld	r0, X
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <getkey+0x92>
 1ea:	22 0f       	add	r18, r18
 1ec:	33 1f       	adc	r19, r19
 1ee:	0a 94       	dec	r0
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <getkey+0x8e>
 1f2:	20 95       	com	r18
 1f4:	29 23       	and	r18, r25
 1f6:	28 bb       	out	0x18, r18	; 24
 1f8:	cf 5f       	subi	r28, 0xFF	; 255
 1fa:	c4 30       	cpi	r28, 0x04	; 4
 1fc:	08 f4       	brcc	.+2      	; 0x200 <getkey+0xa4>
 1fe:	b5 cf       	rjmp	.-150    	; 0x16a <getkey+0xe>
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <char_to_string>:
 204:	fb 01       	movw	r30, r22
 206:	80 83       	st	Z, r24
 208:	11 82       	std	Z+1, r1	; 0x01
 20a:	08 95       	ret

0000020c <add_to_string>:

void add_to_string(char a, char *str)
{
	unsigned char i = 0;
 20c:	90 e0       	ldi	r25, 0x00	; 0
	while(str[i] != '\0')
 20e:	01 c0       	rjmp	.+2      	; 0x212 <add_to_string+0x6>
	{
		i++;
 210:	9f 5f       	subi	r25, 0xFF	; 255
}

void add_to_string(char a, char *str)
{
	unsigned char i = 0;
	while(str[i] != '\0')
 212:	29 2f       	mov	r18, r25
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	db 01       	movw	r26, r22
 218:	a2 0f       	add	r26, r18
 21a:	b3 1f       	adc	r27, r19
 21c:	4c 91       	ld	r20, X
 21e:	41 11       	cpse	r20, r1
 220:	f7 cf       	rjmp	.-18     	; 0x210 <add_to_string+0x4>
	{
		i++;
	}
	str[i] = a;
 222:	8c 93       	st	X, r24
	str[i+1] = '\0';
 224:	2f 5f       	subi	r18, 0xFF	; 255
 226:	3f 4f       	sbci	r19, 0xFF	; 255
 228:	fb 01       	movw	r30, r22
 22a:	e2 0f       	add	r30, r18
 22c:	f3 1f       	adc	r31, r19
 22e:	10 82       	st	Z, r1
 230:	08 95       	ret

00000232 <main>:
#include "lib.h"
char num1[8];
char num2[8];

int main(void)
{
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	00 d0       	rcall	.+0      	; 0x238 <main+0x6>
 238:	00 d0       	rcall	.+0      	; 0x23a <main+0x8>
 23a:	cd b7       	in	r28, 0x3d	; 61
 23c:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
 23e:	0e 94 89 00 	call	0x112	; 0x112 <LCD_init>
	char key_str[4] = {};
 242:	19 82       	std	Y+1, r1	; 0x01
 244:	1a 82       	std	Y+2, r1	; 0x02
 246:	1b 82       	std	Y+3, r1	; 0x03
 248:	1c 82       	std	Y+4, r1	; 0x04
	char key;
    while (1) 
    {
		key = getkey();
 24a:	0e 94 ae 00 	call	0x15c	; 0x15c <getkey>
 24e:	18 2f       	mov	r17, r24
		
		if (key >= '0' && key <= '9' )
 250:	80 ed       	ldi	r24, 0xD0	; 208
 252:	81 0f       	add	r24, r17
 254:	8a 30       	cpi	r24, 0x0A	; 10
 256:	80 f4       	brcc	.+32     	; 0x278 <main+0x46>
		{		
			char_to_string(key, key_str);
 258:	be 01       	movw	r22, r28
 25a:	6f 5f       	subi	r22, 0xFF	; 255
 25c:	7f 4f       	sbci	r23, 0xFF	; 255
 25e:	81 2f       	mov	r24, r17
 260:	0e 94 02 01 	call	0x204	; 0x204 <char_to_string>
			add_to_string(key, num1);
 264:	6a e8       	ldi	r22, 0x8A	; 138
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	81 2f       	mov	r24, r17
 26a:	0e 94 06 01 	call	0x20c	; 0x20c <add_to_string>
			LCD_print(key_str);
 26e:	ce 01       	movw	r24, r28
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_print>
 276:	e9 cf       	rjmp	.-46     	; 0x24a <main+0x18>
		}
		else 
		{
			switch (key)
 278:	1b 32       	cpi	r17, 0x2B	; 43
 27a:	39 f7       	brne	.-50     	; 0x24a <main+0x18>
			{
			case '+':
				char_to_string(key, key_str);
 27c:	be 01       	movw	r22, r28
 27e:	6f 5f       	subi	r22, 0xFF	; 255
 280:	7f 4f       	sbci	r23, 0xFF	; 255
 282:	81 2f       	mov	r24, r17
 284:	0e 94 02 01 	call	0x204	; 0x204 <char_to_string>
				LCD_print(key_str);
 288:	ce 01       	movw	r24, r28
 28a:	01 96       	adiw	r24, 0x01	; 1
 28c:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_print>
 290:	dc cf       	rjmp	.-72     	; 0x24a <main+0x18>

00000292 <_exit>:
 292:	f8 94       	cli

00000294 <__stop_program>:
 294:	ff cf       	rjmp	.-2      	; 0x294 <__stop_program>
