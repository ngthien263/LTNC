
Bai1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000236  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00000236  000002aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b0c  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000722  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000480  00000000  00000000  000015f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a6  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004b2  00000000  00000000  00001efa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000023ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 39       	cpi	r26, 0x9A	; 154
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 01 01 	call	0x202	; 0x202 <main>
  7a:	0c 94 19 01 	jmp	0x232	; 0x232 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_command>:
	unsigned char address;
	if(y != 1)
	address = 0xC0 + x - 1;
	else
	address = 0x80 + x - 1;
	LCD_command(address);
  82:	92 b3       	in	r25, 0x12	; 18
  84:	9e 7f       	andi	r25, 0xFE	; 254
  86:	92 bb       	out	0x12, r25	; 18
  88:	92 b3       	in	r25, 0x12	; 18
  8a:	9d 7f       	andi	r25, 0xFD	; 253
  8c:	92 bb       	out	0x12, r25	; 18
  8e:	ef e9       	ldi	r30, 0x9F	; 159
  90:	ff e0       	ldi	r31, 0x0F	; 15
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <LCD_command+0x10>
  96:	00 c0       	rjmp	.+0      	; 0x98 <LCD_command+0x16>
  98:	00 00       	nop
  9a:	85 bb       	out	0x15, r24	; 21
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	84 60       	ori	r24, 0x04	; 4
  a0:	82 bb       	out	0x12, r24	; 18
  a2:	8f e9       	ldi	r24, 0x9F	; 159
  a4:	9f e0       	ldi	r25, 0x0F	; 15
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_command+0x24>
  aa:	00 c0       	rjmp	.+0      	; 0xac <LCD_command+0x2a>
  ac:	00 00       	nop
  ae:	82 b3       	in	r24, 0x12	; 18
  b0:	8b 7f       	andi	r24, 0xFB	; 251
  b2:	82 bb       	out	0x12, r24	; 18
  b4:	ef ed       	ldi	r30, 0xDF	; 223
  b6:	fe e2       	ldi	r31, 0x2E	; 46
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <LCD_command+0x36>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <LCD_command+0x3c>
  be:	00 00       	nop
  c0:	08 95       	ret

000000c2 <LCD_data>:
  c2:	92 b3       	in	r25, 0x12	; 18
  c4:	91 60       	ori	r25, 0x01	; 1
  c6:	92 bb       	out	0x12, r25	; 18
  c8:	92 b3       	in	r25, 0x12	; 18
  ca:	9d 7f       	andi	r25, 0xFD	; 253
  cc:	92 bb       	out	0x12, r25	; 18
  ce:	ef e9       	ldi	r30, 0x9F	; 159
  d0:	ff e0       	ldi	r31, 0x0F	; 15
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCD_data+0x10>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCD_data+0x16>
  d8:	00 00       	nop
  da:	85 bb       	out	0x15, r24	; 21
  dc:	82 b3       	in	r24, 0x12	; 18
  de:	84 60       	ori	r24, 0x04	; 4
  e0:	82 bb       	out	0x12, r24	; 18
  e2:	8f e9       	ldi	r24, 0x9F	; 159
  e4:	9f e0       	ldi	r25, 0x0F	; 15
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_data+0x24>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCD_data+0x2a>
  ec:	00 00       	nop
  ee:	82 b3       	in	r24, 0x12	; 18
  f0:	8b 7f       	andi	r24, 0xFB	; 251
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	ef e9       	ldi	r30, 0x9F	; 159
  f6:	ff e0       	ldi	r31, 0x0F	; 15
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_data+0x36>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_data+0x3c>
  fe:	00 00       	nop
 100:	08 95       	ret

00000102 <LCD_init>:
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	84 bb       	out	0x14, r24	; 20
 106:	81 b3       	in	r24, 0x11	; 17
 108:	87 60       	ori	r24, 0x07	; 7
 10a:	81 bb       	out	0x11, r24	; 17
 10c:	8f e9       	ldi	r24, 0x9F	; 159
 10e:	9f e0       	ldi	r25, 0x0F	; 15
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <LCD_init+0xe>
 114:	00 c0       	rjmp	.+0      	; 0x116 <LCD_init+0x14>
 116:	00 00       	nop
 118:	88 e3       	ldi	r24, 0x38	; 56
 11a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 11e:	8c e0       	ldi	r24, 0x0C	; 12
 120:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 124:	8f e9       	ldi	r24, 0x9F	; 159
 126:	9f e0       	ldi	r25, 0x0F	; 15
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_init+0x26>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCD_init+0x2c>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <LCD_print>:
}

void LCD_print(const char *str) {
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	ec 01       	movw	r28, r24
	while(*str) {
 138:	03 c0       	rjmp	.+6      	; 0x140 <LCD_print+0xe>
		LCD_data(*str++);
 13a:	21 96       	adiw	r28, 0x01	; 1
 13c:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_data>
	address = 0x80 + x - 1;
	LCD_command(address);
}

void LCD_print(const char *str) {
	while(*str) {
 140:	88 81       	ld	r24, Y
 142:	81 11       	cpse	r24, r1
 144:	fa cf       	rjmp	.-12     	; 0x13a <LCD_print+0x8>
		LCD_data(*str++);
	}
}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <getkey>:
char getkey()
{
 14c:	cf 93       	push	r28
	char key = '\0';
	OUT_dir = 0x0F;
 14e:	8f e0       	ldi	r24, 0x0F	; 15
 150:	87 bb       	out	0x17, r24	; 23
	IN_dir = 0x00;
 152:	1a ba       	out	0x1a, r1	; 26
	unsigned char i = 0, j = 0;
	for(i = 0; i < 4; i++)
 154:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_data(*str++);
	}
}
char getkey()
{
	char key = '\0';
 156:	80 e0       	ldi	r24, 0x00	; 0
	OUT_dir = 0x0F;
	IN_dir = 0x00;
	unsigned char i = 0, j = 0;
	for(i = 0; i < 4; i++)
 158:	4b c0       	rjmp	.+150    	; 0x1f0 <getkey+0xa4>
	{
		OUT_port |= (1<<cols_pin[i]);
 15a:	98 b3       	in	r25, 0x18	; 24
 15c:	6c 2f       	mov	r22, r28
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	fb 01       	movw	r30, r22
 162:	e0 57       	subi	r30, 0x70	; 112
 164:	ff 4f       	sbci	r31, 0xFF	; 255
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	00 80       	ld	r0, Z
 16c:	02 c0       	rjmp	.+4      	; 0x172 <getkey+0x26>
 16e:	22 0f       	add	r18, r18
 170:	33 1f       	adc	r19, r19
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <getkey+0x22>
 176:	29 2b       	or	r18, r25
 178:	28 bb       	out	0x18, r18	; 24
		for(j = 0; j < 6; j++)
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	27 c0       	rjmp	.+78     	; 0x1cc <getkey+0x80>
		{
			if((PINA & (1<<rows_pin[j])))
 17e:	e9 b3       	in	r30, 0x19	; 25
 180:	29 2f       	mov	r18, r25
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	d9 01       	movw	r26, r18
 186:	ac 56       	subi	r26, 0x6C	; 108
 188:	bf 4f       	sbci	r27, 0xFF	; 255
 18a:	ac 91       	ld	r26, X
 18c:	4a 2f       	mov	r20, r26
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <getkey+0x4a>
 192:	f5 95       	asr	r31
 194:	e7 95       	ror	r30
 196:	aa 95       	dec	r26
 198:	e2 f7       	brpl	.-8      	; 0x192 <getkey+0x46>
 19a:	e0 ff       	sbrs	r30, 0
 19c:	16 c0       	rjmp	.+44     	; 0x1ca <getkey+0x7e>
			{
				key = keypad[j][i] ;
 19e:	f9 01       	movw	r30, r18
 1a0:	ee 0f       	add	r30, r30
 1a2:	ff 1f       	adc	r31, r31
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	e6 0f       	add	r30, r22
 1aa:	f7 1f       	adc	r31, r23
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	e0 5a       	subi	r30, 0xA0	; 160
 1b2:	ff 4f       	sbci	r31, 0xFF	; 255
 1b4:	80 81       	ld	r24, Z
				while(PINA & (1<<rows_pin[j]));
 1b6:	29 b3       	in	r18, 0x19	; 25
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	04 2e       	mov	r0, r20
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <getkey+0x76>
 1be:	35 95       	asr	r19
 1c0:	27 95       	ror	r18
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <getkey+0x72>
 1c6:	20 fd       	sbrc	r18, 0
 1c8:	f6 cf       	rjmp	.-20     	; 0x1b6 <getkey+0x6a>
	IN_dir = 0x00;
	unsigned char i = 0, j = 0;
	for(i = 0; i < 4; i++)
	{
		OUT_port |= (1<<cols_pin[i]);
		for(j = 0; j < 6; j++)
 1ca:	9f 5f       	subi	r25, 0xFF	; 255
 1cc:	96 30       	cpi	r25, 0x06	; 6
 1ce:	b8 f2       	brcs	.-82     	; 0x17e <getkey+0x32>
			{
				key = keypad[j][i] ;
				while(PINA & (1<<rows_pin[j]));
			}
		}
		OUT_port &= ~(1<<cols_pin[i]);
 1d0:	98 b3       	in	r25, 0x18	; 24
 1d2:	fb 01       	movw	r30, r22
 1d4:	e0 57       	subi	r30, 0x70	; 112
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	21 e0       	ldi	r18, 0x01	; 1
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	00 80       	ld	r0, Z
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <getkey+0x98>
 1e0:	22 0f       	add	r18, r18
 1e2:	33 1f       	adc	r19, r19
 1e4:	0a 94       	dec	r0
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <getkey+0x94>
 1e8:	20 95       	com	r18
 1ea:	29 23       	and	r18, r25
 1ec:	28 bb       	out	0x18, r18	; 24
{
	char key = '\0';
	OUT_dir = 0x0F;
	IN_dir = 0x00;
	unsigned char i = 0, j = 0;
	for(i = 0; i < 4; i++)
 1ee:	cf 5f       	subi	r28, 0xFF	; 255
 1f0:	c4 30       	cpi	r28, 0x04	; 4
 1f2:	08 f4       	brcc	.+2      	; 0x1f6 <getkey+0xaa>
 1f4:	b2 cf       	rjmp	.-156    	; 0x15a <getkey+0xe>
			}
		}
		OUT_port &= ~(1<<cols_pin[i]);
	}
	return key;
}
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <char_to_string>:


void char_to_string(char c, char *str) {
	str[0] = c;
 1fa:	fb 01       	movw	r30, r22
 1fc:	80 83       	st	Z, r24
	str[1] = '\0';
 1fe:	11 82       	std	Z+1, r1	; 0x01
 200:	08 95       	ret

00000202 <main>:
#include "lib.h"

int main(void)
{
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	00 d0       	rcall	.+0      	; 0x208 <main+0x6>
 208:	00 d0       	rcall	.+0      	; 0x20a <main+0x8>
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
 20e:	0e 94 81 00 	call	0x102	; 0x102 <LCD_init>
	char key_str[4] = {};
 212:	19 82       	std	Y+1, r1	; 0x01
 214:	1a 82       	std	Y+2, r1	; 0x02
 216:	1b 82       	std	Y+3, r1	; 0x03
 218:	1c 82       	std	Y+4, r1	; 0x04
	char key;
    while (1) 
    {
		key = getkey();
 21a:	0e 94 a6 00 	call	0x14c	; 0x14c <getkey>
		char_to_string(key, key_str);
 21e:	be 01       	movw	r22, r28
 220:	6f 5f       	subi	r22, 0xFF	; 255
 222:	7f 4f       	sbci	r23, 0xFF	; 255
 224:	0e 94 fd 00 	call	0x1fa	; 0x1fa <char_to_string>
		LCD_print(key_str);
 228:	ce 01       	movw	r24, r28
 22a:	01 96       	adiw	r24, 0x01	; 1
 22c:	0e 94 99 00 	call	0x132	; 0x132 <LCD_print>
 230:	f4 cf       	rjmp	.-24     	; 0x21a <main+0x18>

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>
